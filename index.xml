<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>破耳狼</title>
    <link>https://moketao.github.io/</link>
    <description>Recent content on 破耳狼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 11 May 2018 10:24:33 +0000</lastBuildDate>
    
	<atom:link href="https://moketao.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018和2019</title>
      <link>https://moketao.github.io/2018and2019/</link>
      <pubDate>Fri, 11 May 2018 10:24:33 +0000</pubDate>
      
      <guid>https://moketao.github.io/2018and2019/</guid>
      <description>&lt;p&gt;2019 年，我大部分时间将花费在这两个链接上：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/HeTeam/he4js&#34;&gt;https://github.com/HeTeam/he4js&lt;/a&gt; 也就是下面提到的 AGI（通用人工智能） demo。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.poerlang.com&#34;&gt;https://blog.poerlang.com&lt;/a&gt; 超短文集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2018 主要做了下面几件事：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/2019/dedao2018.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>不务正业的程序员02（关于捏脸）</title>
      <link>https://moketao.github.io/badcoder2/</link>
      <pubDate>Fri, 11 May 2018 10:24:33 +0000</pubDate>
      
      <guid>https://moketao.github.io/badcoder2/</guid>
      <description>&lt;p&gt;在《逆水寒》里捏了一把脸：
&lt;img src=&#34;https://moketao.github.io/img/nishuihan/snap_1532762251413.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://moketao.github.io/img/nishuihan/snap_1532762282364.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://moketao.github.io/img/nishuihan/snap_1532762310898.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://moketao.github.io/img/nishuihan/snap_1532762434817.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>不务正业的程序员01（关于PS）</title>
      <link>https://moketao.github.io/badcoder1/</link>
      <pubDate>Wed, 14 Feb 2018 13:04:47 +0000</pubDate>
      
      <guid>https://moketao.github.io/badcoder1/</guid>
      <description>&lt;p&gt;在做一款水浒相关的游戏，由于美术画出来的人物五官实在惨不忍睹，于是拿来PS了一下。&lt;/p&gt;

&lt;p&gt;左边是美工画的，细节不错，可惜比例扭曲了，右边是我修好的。贴到这里留作不务正业的纪念。&lt;/p&gt;

&lt;p&gt;↓异人男
&lt;img src=&#34;https://moketao.github.io/img/ps/ps1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓武士女
&lt;img src=&#34;https://moketao.github.io/img/ps/ps2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓文人女
&lt;img src=&#34;https://moketao.github.io/img/ps/ps3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓异人女
&lt;img src=&#34;https://moketao.github.io/img/ps/ps4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TreeMap编辑器和3D技能编辑器</title>
      <link>https://moketao.github.io/editor/</link>
      <pubDate>Sun, 21 May 2017 18:53:21 +0800</pubDate>
      
      <guid>https://moketao.github.io/editor/</guid>
      <description>&lt;p&gt;今天整理资料，从硬盘里翻出两个有意思的编辑器，截图留念一下。&lt;/p&gt;

&lt;p&gt;下面这个是给大学同学韦华做编剧辅助的软件，取名叫TreeMap。（原本是有设想过，定义人格后能够自动生成剧本的，但是这个提议太庞大了，只能先做成树形结构的笔记本）&lt;/p&gt;

&lt;p&gt;现在想来，如果要跟上时代的话，要加入语音搜索和全文搜索功能才算完善。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/editor01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/editor02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://moketao.github.io/data/TreeMap_bak20170521.rar&#34;&gt;rar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面这个是在千尘科技时做的3D技能编辑器，项目名称是剑破虚空，原本是修仙类的，后来转成Dota类的日韩风游戏:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ProtoBuff 协议号解析与字典代码类导出</title>
      <link>https://moketao.github.io/protobuff_dic/</link>
      <pubDate>Wed, 24 Feb 2016 12:13:06 +0800</pubDate>
      
      <guid>https://moketao.github.io/protobuff_dic/</guid>
      <description>protodic代码放 https://github.com/moketao/ProtoDic</description>
    </item>
    
    <item>
      <title>TextureGod ，“窥视”显卡内部的贴图和滤镜</title>
      <link>https://moketao.github.io/texture_god/</link>
      <pubDate>Sun, 19 Apr 2015 16:13:06 +0800</pubDate>
      
      <guid>https://moketao.github.io/texture_god/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/tg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有段时间，我对于 Adobe scout 非常不满，并且对项目频频闪退，也很恼火。&lt;/p&gt;

&lt;p&gt;于是。。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TextureGod&lt;/strong&gt; 诞生了。&lt;/p&gt;

&lt;p&gt;用来 “监控” Starling 和 FeathersUI 的贴图，“窥视”显卡内部的贴图、滤镜。&lt;/p&gt;

&lt;p&gt;如果想知道某张贴图或者滤镜，是否被多次 new 出来浪费了显存，&lt;/p&gt;

&lt;p&gt;只要打开 TextureGod 就能一目了然。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BuildingAssetBundles in 5.x 中文简译</title>
      <link>https://moketao.github.io/building_asset_bundles_in_5_cn/</link>
      <pubDate>Thu, 16 Apr 2015 18:14:20 +0800</pubDate>
      
      <guid>https://moketao.github.io/building_asset_bundles_in_5_cn/</guid>
      <description>&lt;p&gt;每篇博文的诞生，都是因为世界不够完美。&lt;/p&gt;

&lt;p&gt;这不，Unity5刚出来，打包流程和之前差别较大，国内搜到的都是关于4.6的文章。&lt;/p&gt;

&lt;p&gt;言归正传，以下简单翻译，英文原文在 &lt;a href=&#34;http://docs.unity3d.com/Manual/BuildingAssetBundles5x.html&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;AssetBundles说白了就是一种的压缩包，挂着服务器上让玩家下载更新游戏资源。&lt;/p&gt;

&lt;p&gt;Unity 4.x 的环境里，都是用脚本去创建 AssetBundles （以下简称&lt;strong&gt;AB&lt;/strong&gt;）。
Unity5.x为了简化流程，添加了可视化工具。当你选择某个资源的时候，比如一张图片，你会发现在屏幕右下角，多了两个关于AssetBundles的下拉菜单。在第一个菜单里，你可以新建一个&lt;strong&gt;AB&lt;/strong&gt;，或者将当前资源归到某个你已经建好的&lt;strong&gt;AB&lt;/strong&gt;里。第二个下拉菜单是指定变体的，默认是没有变体的，但你可以新建。比如sd变体（标清版）和hd变体（高清版），具体说：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity3D常用路径解读（表格版本）</title>
      <link>https://moketao.github.io/unity_path_ios_android/</link>
      <pubDate>Tue, 14 Apr 2015 14:26:54 +0800</pubDate>
      
      <guid>https://moketao.github.io/unity_path_ios_android/</guid>
      <description>&lt;p&gt;关于Unity的资源路径和权限，网上的资料都很零散，于是我打算用表格来解释清楚。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Unity目录&lt;/th&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;iTunes备份（ios）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Application.&lt;strong&gt;dataPath&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;只读&lt;/strong&gt; ，打包时内容已固定，不能更改，可以读取“sceneName.unity3d”(待验证)&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Application.&lt;strong&gt;streamingAssetsPath&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;只读&lt;/strong&gt; ，打包时内容已固定，不能更改，程序员在Unity项目的Assets文件夹下手动创建的&amp;rdquo;StreamingAssets&amp;rdquo;目录，可以存放xml、json、jpg、mp4等等文件，手机平台上只读，台式机可以读写。&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Application.&lt;strong&gt;persistentDataPath&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可读可写&lt;/strong&gt;，用户使用过程中产生的数据，比如分享截图、下载音乐等等。此目录暴露给用户，用户打开iTunes就看得见，当然此目录也可以存放app生成的文件或下载文件。此目录会被备份到iTunes并同步到其它苹果设备（如果用户有多台iPhone的话），但是app审核上线期间不要在这个目录占用太多，否则有可能会通不过审核，如果更新包很大的话，推荐使用Application.&lt;strong&gt;temporaryCachePath&lt;/strong&gt; 存放下载更新包。&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Application.&lt;strong&gt;temporaryCachePath&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可读可写&lt;/strong&gt;，不会被iTunes备份，但也不会被删除，会一直保留在当前设备。&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近做的妹子</title>
      <link>https://moketao.github.io/3dgirl/</link>
      <pubDate>Wed, 08 Apr 2015 11:53:21 +0800</pubDate>
      
      <guid>https://moketao.github.io/3dgirl/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/idle08.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>行为树（决策树）AI编辑器</title>
      <link>https://moketao.github.io/ai_behavior_editor/</link>
      <pubDate>Wed, 01 Apr 2015 17:58:08 +0800</pubDate>
      
      <guid>https://moketao.github.io/ai_behavior_editor/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/ai.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;关于我实现的那个AI编辑器，以前有提到过，写在csdn的blog上。
可以点&lt;strong&gt;&lt;a href=&#34;http://blog.csdn.net/mokt2001/article/details/23034309&#34;&gt;这里&lt;/a&gt;&lt;/strong&gt;查看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于UI编辑器的一些实践和思考</title>
      <link>https://moketao.github.io/ui_thinking/</link>
      <pubDate>Wed, 25 Mar 2015 16:46:25 +0800</pubDate>
      
      <guid>https://moketao.github.io/ui_thinking/</guid>
      <description>&lt;p&gt;经历了3个项目，都是前端程序员写死的UI，没有编辑器的概念，全是程序员写死的UI布局，企业都没有想到这方面的传承，也很少有主程序会去关注UI编辑器，或者是我遇到的主程还不够多？&lt;/p&gt;

&lt;p&gt;后来忍不住写了一个叫做 XLayout 的 UI编辑器，基于 Starling 和 FeathersUI 的百分比布局模式，导出成 xml 或者 json，通过配置加载和读取，在游戏中“反射”回来。&lt;/p&gt;

&lt;p&gt;只有UI编辑器实现了，并且成熟了，前端才不需要那么多程序员，或者说前端程序员可以多用点时间在别的事情上，而不是整天跟那堆UI代码死磕。&lt;/p&gt;

&lt;p&gt;当然了，Flex4.6 也早就实现了类似的功能，可惜现在连 FlashBuilder 4.7 都不再维护了。&lt;/p&gt;

&lt;p&gt;下面是几张 XLayout 的截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/u00.png&#34; alt=&#34;&#34; /&gt;
↑对于属性编辑面板，我自己还是比较满意的。只要某控件实现了指定的接口，就可以在属性面板上显示它想要呈现给编辑者的任意多个属性，并支持下拉选项，数值，字符串等类型。另外还支持了拖拽 Label区域来改变数值的功能，以及颜色拾取器、图片拾取的功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/u01.png&#34; alt=&#34;&#34; /&gt;
↑而对于百分比布局面板，就不太满意了，主要是因为这几天，我试用了Unity迟来的、新的GUI系统（简称 &lt;strong&gt;UGUI&lt;/strong&gt;），才有这样的感觉的。下面是 &lt;strong&gt;UGUI&lt;/strong&gt; 的截图，我感觉下面这个布局面板(Rect transform)，是 &lt;strong&gt;UGUI&lt;/strong&gt; 最有价值的功能，没有之一，这个面板集合了绝对定位和相对定位的概念在里面，用了就回不去了↓：
&lt;img src=&#34;https://moketao.github.io/img/u02.png&#34; alt=&#34;&#34; /&gt;
↑当然， &lt;strong&gt;UGUI&lt;/strong&gt;，并没有NGUI那么多功能，稍微有点欠缺。但是有 Rect transform 布局已经很爽了，我将来写的编辑器，百分百会剽窃这个概念。 我太坏了，先跟Unity道个歉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/u03.png&#34; alt=&#34;&#34; /&gt;
↑这张图，是我对未来全新UI编辑器的展望，策划只要使用特殊账号进入游戏，就能够编辑界面，包括移动按钮位置，修改面板背景，添加 lua 脚本或者其它可视化编程脚本等等（类似于虚幻4的蓝图系统）。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏公告编辑器（html）</title>
      <link>https://moketao.github.io/htmleditor_for_game/</link>
      <pubDate>Sat, 21 Mar 2015 16:13:28 +0800</pubDate>
      
      <guid>https://moketao.github.io/htmleditor_for_game/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/ge.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;源码：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UnityVS 安装与使用</title>
      <link>https://moketao.github.io/unityvs_install/</link>
      <pubDate>Mon, 16 Mar 2015 17:24:02 +0800</pubDate>
      
      <guid>https://moketao.github.io/unityvs_install/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;先安装 &lt;strong&gt;VS2013&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;然后再安装 &lt;strong&gt;UnityVS&lt;/strong&gt; ，UnityVS在2014年被微软收购，所以现在是免费的，感谢微软。VS2013对应UnityVS 2013，从&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/20b80b8c-659b-45ef-96c1-437828fe7cf2&#34;&gt;这里&lt;/a&gt;下载，下载页面可以选择其他版本的UnityVS，比如2015版本的。&lt;/li&gt;
&lt;li&gt;进入Unity，导入UnityVS包。&lt;/li&gt;
&lt;li&gt;检查看一下Unity的菜单：Edit &amp;gt;&amp;gt; Preferences &amp;gt;&amp;gt; External Script Editor 。 当前选项应该变成了 UnityVS.OpenFile，如果没有就手动选择一下。&lt;/li&gt;
&lt;li&gt;这个时候再去新建 C# ，双击即可打开VS2013.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Unity Shader 实现 GPU Hair</title>
      <link>https://moketao.github.io/unity_shader_gpu_hair/</link>
      <pubDate>Fri, 13 Feb 2015 09:39:39 +0800</pubDate>
      
      <guid>https://moketao.github.io/unity_shader_gpu_hair/</guid>
      <description>&lt;p&gt;本来想用 &lt;strong&gt;Unity&lt;/strong&gt; &lt;strong&gt;布料系统&lt;/strong&gt; 实现头发或飘带等效果，但是使用过后，发现非常消耗性能。
所以不得不研究别的办法。
下面是我的实现方法，&lt;strong&gt;GPU Hair&lt;/strong&gt;：
&lt;img src=&#34;https://moketao.github.io/img/gpuhair.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;
Shader &#34;Custom/GPUHair&#34;{
    Properties{
        _MainTex (&#34;Base (RGB)&#34;, 2D) = &#34;white&#34; {}        //贴图
        _DelayPoint (&#34;DelayPoint&#34;, Vector) = (9.0,0,0,0)//尾部位置
        _HairLength(&#34;HairLength&#34;,Float) = 5             //头发长度
        _TimeScale(&#34;TimeScale&#34;,Range(0.0,200)) = 50     //波形速度
    }
    SubShader{
        Tags{&#34;RenderType&#34;=&#34;Opaque&#34;}
        Cull off
        CGPROGRAM
        #pragma surface SurfFun Lambert vertex:VertFun
        sampler2D _MainTex;

        float _TimeScale;
        float4 _DelayPoint;
        float _HairLength;

        void VertFun(inout appdata_full v){
            _DelayPoint.w = 1;//修正头发变形的bug
            float4 localPos = mul(_World2Object,_DelayPoint);//把尾部的坐标，从世界坐标系挪移进头发模型中
            float factor = clamp(v.vertex.x/_HairLength,0,1);//当前点在发根到发梢的哪个位置（0~1.0）
            float tmpZ = v.vertex.z;//记录z
            v.vertex.z = 0;//把当前点先暂时挪到中间
            float4 dis = pow(factor,2)*(localPos - v.vertex);//当前点到尾部的距离
            v.vertex.y += factor*2*cos(v.vertex.x - _Time*_TimeScale);//波形
            v.vertex = v.vertex + dis;//波形加上甩尾偏移（当人物或者发根移动的时候）
            v.vertex.z += tmpZ;//恢复之前记录的z
        }

        struct Input{
            float2 uv_MainTex;
        };
        void SurfFun(Input IN, inout SurfaceOutput o){
            half4 c = tex2D (_MainTex, IN.uv_MainTex);
            o.Albedo = c.rgb;
            o.Alpha = c.a;
        }
        ENDCG
    }
    Fallback &#34;Diffuse&#34;
}
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dxsdk 安装过程中报错: S1023</title>
      <link>https://moketao.github.io/dxsdk_install_err/</link>
      <pubDate>Tue, 13 Jan 2015 17:47:19 +0800</pubDate>
      
      <guid>https://moketao.github.io/dxsdk_install_err/</guid>
      <description>&lt;p&gt;安装directx sdk 报错： errors were encountered during installation of redistributable package s1023&lt;/p&gt;

&lt;h3 id=&#34;解决步奏&#34;&gt;解决步奏:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;点击系统的【开始】按钮，然后点【运行】&lt;/li&gt;
&lt;li&gt;输入&lt;strong&gt;cmd&lt;/strong&gt;，回车&lt;/li&gt;
&lt;li&gt;分别粘贴如下命令，回车（目的是卸载某些冲突的组件）
&lt;pre&gt;&lt;code&gt;MsiExec.exe /passive /X{F0C3E5D1-1ADE-321E-8167-68EF0DE699A5}
MsiExec.exe /passive /X{1D8E6291-B0D5-35EC-8441-6616F567A0F7}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;重新安装 dx sdk&lt;/li&gt;
&lt;li&gt;再安装刚才卸载的 &lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;amp;id=26999&#34;&gt;组件&lt;/a&gt; 如果是64位系统，最好 &lt;strong&gt;vcredist_x86.exe&lt;/strong&gt; 和 &lt;strong&gt;vcredist_x64.exe&lt;/strong&gt; 都装一次。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;英文解决方案原帖，点 &lt;a href=&#34;http://blogs.msdn.com/b/chuckw/archive/2011/12/09/known-issue-directx-sdk-june-2010-setup-and-the-s1023-error.aspx&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用sublime写shader也可以有 autocomplete（笨办法）</title>
      <link>https://moketao.github.io/sublime_autocomplete/</link>
      <pubDate>Sat, 10 Jan 2015 20:05:28 +0800</pubDate>
      
      <guid>https://moketao.github.io/sublime_autocomplete/</guid>
      <description>&lt;p&gt;编写 Unity 的Shader，最痛苦的就是没有代码 &lt;strong&gt;自动完成&lt;/strong&gt; 的代码提示了，今天装了 &lt;strong&gt;Sublime Text&lt;/strong&gt;，只有高亮，于是想出一种超龊的办法，在前面粘贴一段类似的注释代码，如图：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>技能编辑器</title>
      <link>https://moketao.github.io/skilleditor/</link>
      <pubDate>Fri, 19 Dec 2014 16:12:47 +0800</pubDate>
      
      <guid>https://moketao.github.io/skilleditor/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://moketao.github.io/img/skilleditor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>蠕虫算法，一个游戏角色行走路径的解决方案</title>
      <link>https://moketao.github.io/poly_finder/</link>
      <pubDate>Thu, 20 Nov 2014 11:34:21 +0800</pubDate>
      
      <guid>https://moketao.github.io/poly_finder/</guid>
      <description>&lt;p&gt;这个算法是为了优化A*算法而产生的。算是一个优化Astar。&lt;/p&gt;

&lt;p&gt;缘由是,主程说怪物行走时太消耗性能了。于是让我优化一下（因为我是负责怪物AI的）。&lt;/p&gt;

&lt;p&gt;如果是开放式地图，那么怪物AI就由后端来处理了。
不过我们这个是手游，都是单人副本比较多。所以怪物自然要具备一些智商，最基本的智商就是，从地图的A点行进到玩家所在的B点。如果只是单独一只怪物，行进时所需要计算的AStar逻辑并不多，如果错开时间，每隔两秒修正一下路径，那么运算量微乎其微，但是，如果是几十只怪物。。。运算量就大了。&lt;/p&gt;

&lt;p&gt;于是我就开始冥思苦想。&lt;/p&gt;

&lt;p&gt;终于让我想到了这个算法：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang、cuda、Windows 开发环境搭建</title>
      <link>https://moketao.github.io/golang_cuda_windows/</link>
      <pubDate>Sun, 02 Nov 2014 10:51:57 +0800</pubDate>
      
      <guid>https://moketao.github.io/golang_cuda_windows/</guid>
      <description>&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;因为我的系统是 Win7 64位的，所以先装&lt;strong&gt;Mingw-w64&lt;/strong&gt;，下载地址：&lt;a href=&#34;http://sourceforge.net/projects/mingw-w64/&#34;&gt;http://sourceforge.net/projects/mingw-w64/&lt;/a&gt;
安装的时候选 x86_64，其它默认&lt;/li&gt;
&lt;li&gt;然后安装&lt;strong&gt;CUDA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;然后安装&lt;strong&gt;Golang&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;然后安装&lt;strong&gt;EveryThing&lt;/strong&gt;，这是个文件搜索软件，等下会用到&lt;/li&gt;
&lt;li&gt;打开命令窗口cmd，运行：&lt;code&gt;go get github.com/barnex/cuda5&lt;/code&gt;，报错：&lt;code&gt;cannot find -lcuda&lt;/code&gt;，网上搜出全都是Linux解决方案，让我抓狂，所以才有此文。&lt;/li&gt;
&lt;li&gt;用EveryThing搜&lt;strong&gt;cgoflags.go&lt;/strong&gt;，发现在GOPAT的某些目录下包含总共4个cgoflags.go文件，打开后，发现最后面有Windows相关配置&lt;/li&gt;
&lt;li&gt;4个cgoflags.go文件依次打开，将内部有关Windows的部分，全部改成：&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;pre&gt;
////WINDOWS:
//#cgo windows LDFLAGS:-LF:/cuda/bin/lib/x64
//#cgo windows CFLAGS: -IF:/cuda/bin/include
import &#34;C&#34;
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;

&lt;p&gt;上面代码中的F:/cuda/bin/lib/x64，代表cuda安装目录下的的lib目录，&lt;/p&gt;

&lt;p&gt;上面代码中的F:/cuda/bin/include，代表cuda安装目录下的的include目录。&lt;/p&gt;

&lt;p&gt;如果你的cuda安装在&lt;strong&gt;C盘&lt;/strong&gt;，则上面相应位置则是以C:/开头，而不是F:/开头。&lt;/p&gt;

&lt;p&gt;斜杠注释不要去掉，golang能读，import &amp;ldquo;C&amp;rdquo;那一行必须与上一行&lt;strong&gt;紧贴&lt;/strong&gt;，中间不能有空行。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://moketao.github.io/about/</link>
      <pubDate>Sun, 07 Sep 2014 13:49:00 +0800</pubDate>
      
      <guid>https://moketao.github.io/about/</guid>
      <description>&lt;h2 id=&#34;联系方式&#34;&gt;联系方式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;name 莫克陶&lt;/li&gt;
&lt;li&gt;email moketao@qq.com&lt;/li&gt;
&lt;li&gt;qq 30558209&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;经历&#34;&gt;经历&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2011 web.4399.com&lt;/li&gt;
&lt;li&gt;2013 www.zqgame.com.cn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>