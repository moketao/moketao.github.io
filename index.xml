<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>破耳狼</title>
    <link>http://moketao.gitcafe.io/</link>
    <description>Recent content on 破耳狼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 14 Apr 2015 14:26:54 +0800</lastBuildDate>
    <atom:link href="http://moketao.gitcafe.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Unity3D常用路径解读（表格版本）</title>
      <link>http://moketao.gitcafe.io/unity_path_ios_android/</link>
      <pubDate>Tue, 14 Apr 2015 14:26:54 +0800</pubDate>
      
      <guid>http://moketao.gitcafe.io/unity_path_ios_android/</guid>
      <description>

&lt;p&gt;关于Unity的资源路径和权限，网上的资料都很零散，于是我打算用表格来解释清楚。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Unity目录&lt;/th&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;iTunes备份（ios）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Application.&lt;strong&gt;dataPath&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;只读&lt;/strong&gt; ，打包时内容已固定，不能更改，可以读取“sceneName.unity3d”(待验证)&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Application.&lt;strong&gt;streamingAssetsPath&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;只读&lt;/strong&gt; ，打包时内容已固定，不能更改，程序员在Unity项目的Assets文件夹下手动创建的&amp;rdquo;StreamingAssets&amp;rdquo;目录，可以存放xml、json、jpg、mp4等等文件，手机平台上只读，台式机可以读写。&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Application.&lt;strong&gt;persistentDataPath&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可读可写&lt;/strong&gt;，用户使用过程中产生的数据，比如分享截图、下载音乐等等。此目录暴露给用户，用户打开iTunes就看得见，当然此目录也可以存放app生成的文件或下载文件。此目录会被备份到iTunes并同步到其它苹果设备（如果用户有多台iPhone的话），但是app审核上线期间不要在这个目录占用太多，否则有可能会通不过审核，如果更新包很大的话，推荐使用Application.&lt;strong&gt;temporaryCachePath&lt;/strong&gt; 存放下载更新包。&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Application.&lt;strong&gt;temporaryCachePath&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;可读可写&lt;/strong&gt;，不会被iTunes备份，但也不会被删除，会一直保留在当前设备。&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;关于ios的目录权限，可进一步参考 &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html&#34;&gt;这里&lt;/a&gt; 和 &lt;a href=&#34;https://developer.apple.com/icloud/documentation/data-storage/index.html&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;streamingAssetsPath下的文件读取方法是：
&lt;pre&gt;&lt;code&gt;#if UNITY_EDITOR
    string filepath = Application.dataPath +&amp;ldquo;/StreamingAssets&amp;rdquo;+&amp;ldquo;/my.xml&amp;rdquo;;
#elif UNITY_IPHONE
    string filepath = Application.dataPath +&amp;ldquo;/Raw&amp;rdquo;+&amp;ldquo;/my.xml&amp;rdquo;;
#elif UNITY_ANDROID
    string filepath = &amp;ldquo;jar:file://&amp;rdquo; + Application.dataPath + &amp;ldquo;!/assets/&amp;rdquo;+&amp;ldquo;/my.xml;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h3 id=&#34;ios:16683e76e14a70877b630ac3dd20e29c&#34;&gt;IOS:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Application.dataPath :             Application/xxxx-xxxx-xxxx-xxxxxxxxxxxx/xxx.app/Data
Application.streamingAssetsPath :  Application/xxxx-xxxx-xxxxxxxxxxxx/xxx.app/Data/Raw
Application.persistentDataPath :   Application/xxxx-xxxx-xxxxxxxxxxxx/Documents
Application.temporaryCachePath :   Application/xxxx-xxxx-xxxxxxxxxxxx/Library/Caches&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;android:16683e76e14a70877b630ac3dd20e29c&#34;&gt;Android:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Application.dataPath :                /data/app/xxx.xxx.xxx.apk
Application.streamingAssetsPath :     jar:file:///data/app/xxx.xxx.xxx.apk/!/assets
Application.persistentDataPath :      /data/data/xxx.xxx.xxx/files
Application.temporaryCachePath :      /data/data/xxx.xxx.xxx/cache&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;windows:16683e76e14a70877b630ac3dd20e29c&#34;&gt;Windows:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Application.dataPath :                /Assets
Application.streamingAssetsPath :     /Assets/StreamingAssets
Application.persistentDataPath :      C:/Users/xxxx/AppData/LocalLow/CompanyName/ProductName
Application.temporaryCachePath :      C:/Users/xxxx/AppData/Local/Temp/CompanyName/ProductName&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mac:16683e76e14a70877b630ac3dd20e29c&#34;&gt;Mac:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Application.dataPath :                /Assets
Application.streamingAssetsPath :     /Assets/StreamingAssets
Application.persistentDataPath :      /Users/xxxx/Library/Caches/CompanyName/Product Name
Application.temporaryCachePath :      /var/folders/57/6b4_9w8113x2fsmzx_yhrhvh0000gn/T/CompanyName/Product Name&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用 Unity Shader 实现 GPU Hair</title>
      <link>http://moketao.gitcafe.io/unity_shader_gpu_hair/</link>
      <pubDate>Mon, 13 Apr 2015 09:39:39 +0800</pubDate>
      
      <guid>http://moketao.gitcafe.io/unity_shader_gpu_hair/</guid>
      <description>&lt;p&gt;本来想用 &lt;strong&gt;Unity&lt;/strong&gt; &lt;strong&gt;布料系统&lt;/strong&gt; 实现头发或飘带等效果，但是使用过后，发现非常消耗性能。
所以不得不研究别的办法。
下面是我的实现方法，&lt;strong&gt;GPU Hair&lt;/strong&gt;：
&lt;img src=&#34;http://moketao.gitcafe.io/img/gpuhair.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;pre&gt;
Shader &#34;Custom/GPUHair&#34;{
    Properties{
        _MainTex (&#34;Base (RGB)&#34;, 2D) = &#34;white&#34; {}        //贴图
        _DelayPoint (&#34;DelayPoint&#34;, Vector) = (9.0,0,0,0)//尾部位置
        _HairLength(&#34;HairLength&#34;,Float) = 5             //头发长度
        _TimeScale(&#34;TimeScale&#34;,Range(0.0,200)) = 50     //波形速度
    }
    SubShader{
        Tags{&#34;RenderType&#34;=&#34;Opaque&#34;}
        Cull off
        CGPROGRAM
        #pragma surface SurfFun Lambert vertex:VertFun
        sampler2D _MainTex;

        float _TimeScale;
        float4 _DelayPoint;
        float _HairLength;

        void VertFun(inout appdata_full v){
            _DelayPoint.w = 1;//修正头发变形的bug
            float4 localPos = mul(_World2Object,_DelayPoint);//把尾部的坐标，从世界坐标系挪移进头发模型中
            float factor = clamp(v.vertex.x/_HairLength,0,1);//当前点在发根到发梢的哪个位置（0~1.0）
            float tmpZ = v.vertex.z;//记录z
            v.vertex.z = 0;//把当前点先暂时挪到中间
            float4 dis = pow(factor,2)*(localPos - v.vertex);//当前点到尾部的距离
            v.vertex.y += factor*2*cos(v.vertex.x - _Time*_TimeScale);//波形
            v.vertex = v.vertex + dis;//波形加上甩尾偏移（当人物或者发根移动的时候）
            v.vertex.z += tmpZ;//恢复之前记录的z
        }

        struct Input{
            float2 uv_MainTex;
        };
        void SurfFun(Input IN, inout SurfaceOutput o){
            half4 c = tex2D (_MainTex, IN.uv_MainTex);
            o.Albedo = c.rgb;
            o.Alpha = c.a;
        }
        ENDCG
    }
    Fallback &#34;Diffuse&#34;
}
&lt;/pre&gt;

&lt;p&gt;另外，场景里对应的网格物体，需要再挂一个脚本：&lt;/p&gt;

&lt;pre&gt;
using UnityEngine;
using System.Collections;

public class DelayPoint : MonoBehaviour {

    public GameObject delayPoint;//尾部
    public float delayTime = 0.5f;

    private Transform t1;//网格物体中心点所在位置（发根）
    private Transform t2;//尾部所在位置（发梢）
    private Vector3 distanceToT1;//尾部到中心的距离

    private Vector3 velocity = Vector3.zero;//当前速度
    private Vector3 targetPoint = Vector3.zero;//跟随点

    void Start () {
        t1 = transform;
        t2 = delayPoint.transform;
        distanceToT1 = t2.position - t1.position;
    }
    
    void Update () {
        targetPoint = t1.position + distanceToT1;
        Vector3 newPos = Vector3.SmoothDamp(t2.position, targetPoint, ref velocity, delayTime);//尾部的缓动效果
        t2.position = newPos;
        Renderer render = t1.GetComponent&lt;Renderer&gt;();
        render.material.SetVector(&#34;_DelayPoint&#34;, t2.position);//将尾部的坐标传送给显卡
    }
}
&lt;/pre&gt;

&lt;p&gt;具体使用方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;建立一个plane，大小默认（边长是10），或者用3dsmax建模。&lt;/li&gt;
&lt;li&gt;给plane加上脚本和材质，材质的Shader指定为 Custom/GPUHair。&lt;/li&gt;
&lt;li&gt;建立一个空物体，放置到plane边缘，大概是（5,0,0）的位置。&lt;/li&gt;
&lt;li&gt;在脚本上你会看见一个delayPoint的属性，把空物体拖拽到这个属性上。&lt;/li&gt;
&lt;li&gt;点击播放按钮。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;将来可能会支持碰撞检测，大致的思路已经有了，支持一个碰撞圆应该没问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用sublime写shader也可以有 autocomplete（笨办法）</title>
      <link>http://moketao.gitcafe.io/sublime_autocomplete/</link>
      <pubDate>Fri, 10 Apr 2015 20:05:28 +0800</pubDate>
      
      <guid>http://moketao.gitcafe.io/sublime_autocomplete/</guid>
      <description>&lt;p&gt;编写 Unity 的Shader，最痛苦的就是没有代码 &lt;strong&gt;自动完成&lt;/strong&gt; 的代码提示了，今天装了 &lt;strong&gt;Sublime Text&lt;/strong&gt;，只有高亮，于是想出一种超龊的办法，在前面粘贴一段类似的注释代码，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://moketao.gitcafe.io/img/subl_auto.png&#34; alt=&#34;sublime_unity_shader_auto_complete&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dxsdk 安装过程中报错: S1023</title>
      <link>http://moketao.gitcafe.io/dxsdk_install_err/</link>
      <pubDate>Fri, 10 Apr 2015 17:47:19 +0800</pubDate>
      
      <guid>http://moketao.gitcafe.io/dxsdk_install_err/</guid>
      <description>

&lt;p&gt;安装directx sdk 报错： errors were encountered during installation of redistributable package s1023&lt;/p&gt;

&lt;h3 id=&#34;解决步奏:31e555ba754a60275651e451df32011c&#34;&gt;解决步奏:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;点击系统的【开始】按钮，然后点【运行】&lt;/li&gt;
&lt;li&gt;输入&lt;strong&gt;cmd&lt;/strong&gt;，回车&lt;/li&gt;
&lt;li&gt;分别粘贴如下命令，回车（目的是卸载某些冲突的组件）
&lt;pre&gt;&lt;code&gt;MsiExec.exe /passive /X{F0C3E5D1-1ADE-321E-8167-68EF0DE699A5}
MsiExec.exe /passive /X{1D8E6291-B0D5-35EC-8441-6616F567A0F7}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;重新安装 dx sdk&lt;/li&gt;
&lt;li&gt;再安装刚才卸载的 &lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;amp;id=26999&#34;&gt;组件&lt;/a&gt; 如果是64位系统，最好 &lt;strong&gt;vcredist_x86.exe&lt;/strong&gt; 和 &lt;strong&gt;vcredist_x64.exe&lt;/strong&gt; 都装一次。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;英文解决方案原帖，点 &lt;a href=&#34;http://blogs.msdn.com/b/chuckw/archive/2011/12/09/known-issue-directx-sdk-june-2010-setup-and-the-s1023-error.aspx&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UnityVS 安装与使用</title>
      <link>http://moketao.gitcafe.io/unityvs_install/</link>
      <pubDate>Wed, 08 Apr 2015 17:24:02 +0800</pubDate>
      
      <guid>http://moketao.gitcafe.io/unityvs_install/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;先安装 &lt;strong&gt;VS2013&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;然后再安装 &lt;strong&gt;UnityVS&lt;/strong&gt; ，UnityVS在2014年被微软收购，所以现在是免费的，感谢微软。VS2013对应UnityVS 2013，从&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/20b80b8c-659b-45ef-96c1-437828fe7cf2&#34;&gt;这里&lt;/a&gt;下载，下载页面可以选择其他版本的UnityVS，比如2015版本的。&lt;/li&gt;
&lt;li&gt;进入Unity，导入UnityVS包。&lt;/li&gt;
&lt;li&gt;检查看一下Unity的菜单：Edit &amp;gt;&amp;gt; Preferences &amp;gt;&amp;gt; External Script Editor 。 当前选项应该变成了 UnityVS.OpenFile，如果没有就手动选择一下。&lt;/li&gt;
&lt;li&gt;这个时候再去新建 C# ，双击即可打开VS2013.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>最近做的妹子</title>
      <link>http://moketao.gitcafe.io/3dgirl/</link>
      <pubDate>Wed, 08 Apr 2015 11:53:21 +0800</pubDate>
      
      <guid>http://moketao.gitcafe.io/3dgirl/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://moketao.gitcafe.io/img/idle08.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;整体风格，我尽量做的偏东方女性的风格。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang、cuda、Windows 开发环境搭建</title>
      <link>http://moketao.gitcafe.io/Golang_cuda_Windows/</link>
      <pubDate>Wed, 08 Apr 2015 10:51:57 +0800</pubDate>
      
      <guid>http://moketao.gitcafe.io/Golang_cuda_Windows/</guid>
      <description>

&lt;h2 id=&#34;步骤:cb248cbf25583db7cd96fd4710d513a3&#34;&gt;步骤&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;因为我的系统是 Win7 64位的，所以先装&lt;strong&gt;Mingw-w64&lt;/strong&gt;，下载地址：&lt;a href=&#34;http://sourceforge.net/projects/mingw-w64/&#34;&gt;http://sourceforge.net/projects/mingw-w64/&lt;/a&gt;
安装的时候选 x86_64，其它默认&lt;/li&gt;
&lt;li&gt;然后安装&lt;strong&gt;CUDA&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;然后安装&lt;strong&gt;Golang&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;然后安装&lt;strong&gt;EveryThing&lt;/strong&gt;，这是个文件搜索软件，等下会用到&lt;/li&gt;
&lt;li&gt;打开命令窗口cmd，运行：&lt;code&gt;go get github.com/barnex/cuda5&lt;/code&gt;，报错：&lt;code&gt;cannot find -lcuda&lt;/code&gt;，网上搜出全都是Linux解决方案，让我抓狂，所以才有此文。&lt;/li&gt;
&lt;li&gt;用EveryThing搜&lt;strong&gt;cgoflags.go&lt;/strong&gt;，发现在GOPAT的某些目录下包含总共4个cgoflags.go文件，打开后，发现最后面有Windows相关配置&lt;/li&gt;
&lt;li&gt;4个cgoflags.go文件依次打开，将内部有关Windows的部分，全部改成：&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;pre&gt;
////WINDOWS:
//#cgo windows LDFLAGS:-LF:/cuda/bin/lib/x64
//#cgo windows CFLAGS: -IF:/cuda/bin/include
import &#34;C&#34;
&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;注意事项:cb248cbf25583db7cd96fd4710d513a3&#34;&gt;注意事项&lt;/h2&gt;

&lt;p&gt;上面代码中的F:/cuda/bin/lib/x64，代表cuda安装目录下的的lib目录，&lt;/p&gt;

&lt;p&gt;上面代码中的F:/cuda/bin/include，代表cuda安装目录下的的include目录。&lt;/p&gt;

&lt;p&gt;如果你的cuda安装在&lt;strong&gt;C盘&lt;/strong&gt;，则上面相应位置则是以C:/开头，而不是F:/开头。&lt;/p&gt;

&lt;p&gt;斜杠注释不要去掉，golang能读，import &amp;ldquo;C&amp;rdquo;那一行必须与上一行&lt;strong&gt;紧贴&lt;/strong&gt;，中间不能有空行。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://moketao.gitcafe.io/about/</link>
      <pubDate>Tue, 07 Apr 2015 13:49:00 +0800</pubDate>
      
      <guid>http://moketao.gitcafe.io/about/</guid>
      <description>

&lt;h2 id=&#34;联系方式:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;联系方式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;name 莫克陶&lt;/li&gt;
&lt;li&gt;email moketao@qq.com&lt;/li&gt;
&lt;li&gt;qq 30558209&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;经历:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;经历&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2011 web.4399.com&lt;/li&gt;
&lt;li&gt;2013 www.zqgame.com.cn&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>